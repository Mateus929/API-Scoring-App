{
  "openapi": "3.0.3",
  "info": {
    "title": "Comprehensive Sample API",
    "version": "1.0.0",
    "description": "A detailed OpenAPI specification with endpoint descriptions, schemas, and examples to improve clarity and usability."
  },
  "servers": [
    {
      "url": "https://api.example.com/v2",
      "description": "Production server"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Retrieve all users",
        "description": "Fetches a list of all registered users in the system.",
        "responses": {
          "200": {
            "description": "A JSON array of user objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/User" }
                },
                "examples": {
                  "example-1": {
                    "summary": "Example user list",
                    "value": [
                      { "id": "u1", "name": "Alice", "email": "alice@example.com" },
                      { "id": "u2", "name": "Bob", "email": "bob@example.com" }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Registers a new user in the system.",
        "requestBody": {
          "description": "User object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserCreate" },
              "examples": {
                "example-1": {
                  "summary": "New user creation",
                  "value": { "name": "Charlie", "email": "charlie@example.com", "password": "strongpass123" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Invalid input data.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "parameters": [
        {
          "name": "userId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of the user",
          "schema": {
            "type": "string",
            "example": "u1"
          }
        }
      ],
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieves detailed information about a specific user identified by userId.",
        "responses": {
          "200": {
            "description": "User found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user by ID",
        "description": "Updates all details of a user by their unique ID.",
        "requestBody": {
          "description": "User object with updated information",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UserUpdate" },
              "examples": {
                "example-1": {
                  "summary": "User update example",
                  "value": { "name": "Alice Updated", "email": "alice_new@example.com" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/User" }
              }
            }
          },
          "400": {
            "description": "Invalid user data.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by ID",
        "description": "Deletes the user identified by userId from the system.",
        "responses": {
          "204": {
            "description": "User deleted successfully. No content returned."
          },
          "400": {
            "description": "Invalid user ID.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "Retrieve all products",
        "description": "Returns a list of all available products.",
        "responses": {
          "200": {
            "description": "A JSON array of product objects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Product" }
                },
                "examples": {
                  "example-1": {
                    "summary": "List of products",
                    "value": [
                      { "id": "p1", "name": "Product A", "price": 29.99 },
                      { "id": "p2", "name": "Product B", "price": 49.99 }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid parameters.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new product",
        "description": "Adds a new product to the catalog.",
        "requestBody": {
          "description": "Product object that needs to be added",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProductCreate" },
              "examples": {
                "example-1": {
                  "summary": "New product example",
                  "value": { "name": "Product C", "price": 19.99, "description": "A new product" }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Product created successfully.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Product" }
              }
            }
          },
          "422": {
            "description": "Validation error in input data.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/products/{productId}": {
      "parameters": [
        {
          "name": "productId",
          "in": "path",
          "required": true,
          "description": "Unique identifier of the product",
          "schema": {
            "type": "string",
            "example": "p1"
          }
        }
      ],
      "get": {
        "summary": "Get product by ID",
        "description": "Retrieves details of a product by its ID.",
        "responses": {
          "200": {
            "description": "Product details returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Partially update product",
        "description": "Update one or more fields of a product.",
        "requestBody": {
          "description": "Partial product data to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProductUpdate"
              },
              "examples": {
                "example-1": {
                  "summary": "Update price example",
                  "value": {
                    "price": 24.99
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete product by ID",
        "description": "Removes a product from the catalog.",
        "responses": {
          "204": {
            "description": "Product deleted successfully. No content returned."
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "u1" },
          "name": { "type": "string", "example": "Alice" },
          "email": { "type": "string", "format": "email", "example": "alice@example.com" }
        },
        "required": ["id", "name", "email"]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Charlie" },
          "email": { "type": "string", "format": "email", "example": "charlie@example.com" },
          "password": { "type": "string", "format": "password", "example": "strongpass123" }
        },
        "required": ["name", "email", "password"]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Alice Updated" },
          "email": { "type": "string", "format": "email", "example": "alice_new@example.com" }
        }
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": { "type": "string", "example": "p1" },
          "name": { "type": "string", "example": "Product A" },
          "price": { "type": "number", "format": "float", "example": 29.99 },
          "description": { "type": "string", "example": "A great product." }
        },
        "required": ["id", "name", "price"]
      },
      "ProductCreate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Product C" },
          "price": { "type": "number", "format": "float", "example": 19.99 },
          "description": { "type": "string", "example": "A new product" }
        },
        "required": ["name", "price"]
      },
      "ProductUpdate": {
        "type": "object",
        "properties": {
          "name": { "type": "string", "example": "Product Updated" },
          "price": { "type": "number", "format": "float", "example": 24.99 },
          "description": { "type": "string", "example": "Updated description" }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": { "type": "integer", "example": 400 },
          "message": { "type": "string", "example": "Invalid input data." }
        }
      }
    }
  }
}


